unit UFormServer;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, System.Win.ScktComp, Vcl.StdCtrls,
  Vcl.WinXCtrls, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters,
  dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinDevExpressDarkStyle,
  dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinOffice2013DarkGray,
  dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxContainer, cxEdit, cxListBox, Data.DB, Datasnap.DBClient,
  cxStyles, dxSkinscxPCPainter, cxCustomData, cxFilter, cxData, cxDataStorage,
  cxNavigator, cxDBData, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGridLevel, cxClasses, cxGridCustomView, cxGrid,
  Vcl.Buttons, cxDataControllerConditionalFormattingRulesManagerDialog ;

type
  TForm1 = class(TForm)
    Socket_Server: TServerSocket;
    Status: TMemo;
    ToggleSwitch1: TToggleSwitch;
    CDSServer: TClientDataSet;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    DsServer: TDataSource;
    Grid1ColIP: TcxGridDBColumn;
    GridColNome: TcxGridDBColumn;
    CDSServerIndex: TIntegerField;
    CDSServerIP: TStringField;
    CDSServerApelido: TStringField;
    procedure ServirClick(Sender: TObject);
    procedure Socket_ServerClientConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure Socket_ServerClientDisconnect(Sender: TObject;
      Socket: TCustomWinSocket);
    procedure Socket_ServerClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure Socket_ServerListen(Sender: TObject; Socket: TCustomWinSocket);
    procedure ToggleSwitch1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private

  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin
  CdsServer.Open;
end;

procedure TForm1.ServirClick(Sender: TObject);
begin
  if Socket_Server.Active = True then  // Se o Server estiver ativo...
  begin
    Socket_Server.Active := False;
    Status.Lines.Add('Servidor ::> Servidor Desligado!');
  end
  else
  begin
    Socket_Server.Active := True;
  end;
end;

procedure TForm1.Socket_ServerClientConnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  Status.Lines.Add('Servidor ::> Usuário Conectado => '+ Socket.RemoteAddress);
end;

procedure TForm1.Socket_ServerClientDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
var Index: Integer;
begin
  //grava no log ip  que conectei
  Status.Lines.Add('Servidor ::> Usuário Desconectado => '+ Socket.RemoteAddress);

  //Retira usuario da tabela virtual
  CdsServer.Filter := ('IP = '+QuotedStr(Socket.RemoteAddress));
  CdsServer.Filtered := True;
  CdsServer.Delete;
  CdsServer.Filtered := False;
  CdsServer.Close;
  CdsServer.Open;

  with Socket_Server.Socket do
  begin
    for Index := 0 to ActiveConnections-1 do
    begin
      Connections[Index].SendText('CDS_DEL::::<IP>'+Socket.RemoteAddress+'</IP>');
    end;
  end;
end;

procedure TForm1.Socket_ServerClientRead(Sender: TObject; Socket: TCustomWinSocket);
  var texto: array[0..1] of string;
      temptexto: string;
      Index, i: integer;
      vText: String;

      procedure P_InsereClienteCDS(IP, Apelido : string);
      begin
        CDSServer.Close;
        CDSServer.Open;
        CDSServer.Insert;
        CDSServer.FieldByName('IP').AsString      := IP;
        CDSServer.FieldByName('APELIDO').AsString := Apelido;
        CDSServer.Post;
      end;
begin
  temptexto := Socket.ReceiveText;
  texto[0] := Copy(temptexto, 1,Pos('::::', temptexto) -1);
  texto[1] := Copy(temptexto, Pos('::::', temptexto) + Length('::::'),Length(temptexto));

  if texto[0] = 'NICK' then {Verifica se a mensagem eh de entrada}
  begin
    with Socket_Server.Socket do
    begin
      P_InsereClienteCDS(Socket.RemoteAddress, texto[1]);
      CdsServer.Close;
      CdsServer.Open;
      for Index := 0 to ActiveConnections-1 do
      begin
        if Connections[Index].RemoteAddress = Socket.RemoteAddress then
        begin
          vText:=('CDS_LOAD::::');
          vText:=vText+('<QTD>'+CdsServer.RecordCount+'</QTD>');
          CDSServer.First;
          for i := 1 to CdsServer.RecordCount do
          begin
            vText:=vText+('<IP'+i+'>'+CdsServer.FieldByName('IP').AsString+'</IP'+i+'>');
            vText:=vText+('<AP'+i+'>'+CdsServer.FieldByName('Apelido').AsString+'</AP'+i+'>');
            CDSServer.Next;
          end;
          Connections[Index].SendText(vText);
        end
        else
        begin
          Connections[Index].SendText('CDS_NEW::::<IP>'+Socket.RemoteAddress+'</IP><AP>'+texto[1]+'</AP>');
        end;
      end;
    end;

  end
  else
  begin
    with Socket_Server.Socket do
    begin {Se nao for de entrada, então eh msg normal, no caso passa para todos a msg}
      for Index := 0 to ActiveConnections-1 do
      begin
        Connections[Index].SendText('(' + texto[1] + ') escreveu: ' + texto[0]);
      end;
    end;
    Status.Lines.Add('Servidor ::> ' + texto[1] + ' (' + Socket.RemoteAddress + ') escreveu: '+ texto[0]);
  end;
end;

procedure TForm1.Socket_ServerListen(Sender: TObject; Socket: TCustomWinSocket);
begin
  Status.Lines.Add('Servidor ::> Servidor Ligado!');
end;

procedure TForm1.ToggleSwitch1Click(Sender: TObject);
begin
  if Socket_Server.Active = True then  // Se o Server estiver ativo...
  begin
    Socket_Server.Active := False;
    Status.Lines.Add('Servidor ::> Servidor Desligado!');
  end
  else
  begin
    Socket_Server.Active := True;
  end;
end;
end.
